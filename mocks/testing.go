// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"
)

// Testing is an autogenerated mock type for the Testing type
type Testing struct {
	mock.Mock
}

// Cleanup provides a mock function with given fields: _a0
func (_m *Testing) Cleanup(_a0 func()) {
	_m.Called(_a0)
}

// Error provides a mock function with given fields: args
func (_m *Testing) Error(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Errorf provides a mock function with given fields: format, args
func (_m *Testing) Errorf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Fail provides a mock function with given fields:
func (_m *Testing) Fail() {
	_m.Called()
}

// FailNow provides a mock function with given fields:
func (_m *Testing) FailNow() {
	_m.Called()
}

// Failed provides a mock function with given fields:
func (_m *Testing) Failed() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Fatal provides a mock function with given fields: args
func (_m *Testing) Fatal(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Fatalf provides a mock function with given fields: format, args
func (_m *Testing) Fatalf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Helper provides a mock function with given fields:
func (_m *Testing) Helper() {
	_m.Called()
}

// Log provides a mock function with given fields: args
func (_m *Testing) Log(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logf provides a mock function with given fields: format, args
func (_m *Testing) Logf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Name provides a mock function with given fields:
func (_m *Testing) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Setenv provides a mock function with given fields: key, value
func (_m *Testing) Setenv(key string, value string) {
	_m.Called(key, value)
}

// Skip provides a mock function with given fields: args
func (_m *Testing) Skip(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// SkipNow provides a mock function with given fields:
func (_m *Testing) SkipNow() {
	_m.Called()
}

// Skipf provides a mock function with given fields: format, args
func (_m *Testing) Skipf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Skipped provides a mock function with given fields:
func (_m *Testing) Skipped() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// TempDir provides a mock function with given fields:
func (_m *Testing) TempDir() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewTesting creates a new instance of Testing. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewTesting(t testing.TB) *Testing {
	mock := &Testing{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
